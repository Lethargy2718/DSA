def gridTraveller(m,n, dp = {}):
    """
    The legal moves are right and down. For an mxn
    grid, find the number of possible ways to move from the
    top left corner of the grid to the bottom right corner
    using recursion and dynamic programming.
    """
    if (m,n) in dp:
        return dp[(m,n)]
    if m == n == 1:
        return 1
    elif m == 0 or n == 0:
        return 0
    dp[(m,n)] = gridTraveller(m - 1, n, dp) + gridTraveller(m, n - 1, dp)
    return dp[(m,n)]

result = gridTraveller(100,100)
print(result)